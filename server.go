package main

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/x509"
	"fmt"
	"math/big"

	"github.com/pion/webrtc/v2"
)

const remoteDescriptionTemplate = `v=0
o=- 6920920643910646739 2 IN IP4 127.0.0.1
s=-
t=0 0
a=group:BUNDLE 0
a=msid-semantic: WMS
m=application 9 UDP/DTLS/SCTP webrtc-datachannel
c=IN IP4 0.0.0.0
a=ice-ufrag:V6j+
a=ice-pwd:OEKutPgoHVk/99FfqPOf444w
a=fingerprint:sha-256 invalidFingerprint
a=setup:actpass
a=mid:0
a=sctp-port:5000
`

func main() {
	s := webrtc.SettingEngine{}

	// Generate mDNS Candidates and set a static local hostname
	s.GenerateMulticastDNSCandidates(true)
	s.SetMulticastDNSHostName("offline-browser-communication.local")

	// Set a small number of pre-determined ports we listen for ICE traffic on
	panicIfErr(s.SetEphemeralUDPPortRange(5000, 5005))

	// Disable DTLS Certificate Verification. Currently we aren't able to use stored certificate in the browser
	s.DisableCertificateFingerprintVerification(true)

	// Set static ICE Credentials
	s.SetICECredentials("fKVhbscsMWDGAnBg", "xGjQkAvKIVkBeVTGWcvCQtnVAeapczwa")

	// Create a new PeerConnection, this listens for all incoming DataChannel messages
	api := webrtc.NewAPI(webrtc.WithSettingEngine(s))
	peerConnection, err := api.NewPeerConnection(webrtc.Configuration{
		Certificates: generateCertificates(),
	})
	panicIfErr(err)

	peerConnection.OnDataChannel(func(d *webrtc.DataChannel) {
		d.OnOpen(func() {
			fmt.Printf("DataChannel %s has opened \n", d.Label())
		})

		d.OnMessage(func(m webrtc.DataChannelMessage) {
			fmt.Printf("%s \n", m.Data)
		})
	})

	peerConnection.OnICEConnectionStateChange(func(connectionState webrtc.ICEConnectionState) {
		fmt.Printf("Connection State has changed %s \n", connectionState.String())
	})

	panicIfErr(peerConnection.SetRemoteDescription(webrtc.SessionDescription{
		Type: webrtc.SDPTypeOffer,
		SDP:  remoteDescriptionTemplate,
	}))

	answer, err := peerConnection.CreateAnswer(nil)
	panicIfErr(err)
	panicIfErr(peerConnection.SetLocalDescription(answer))

	fmt.Println("Ready to connect, please load https://jsfiddle.net/vksy1ujd/4/")
	select {}
}

// TODO Have a simple command to show people how to generate certificates
// this gives people flexibility for now
func generateCertificates() []webrtc.Certificate {
	privateKey := &ecdsa.PrivateKey{
		PublicKey: ecdsa.PublicKey{
			elliptic.P256(),
			big.NewInt(0),
			big.NewInt(0),
		},
		D: big.NewInt(0),
	}
	privateKey.PublicKey.X.SetString("105130414064580671882311672025852901814549894858429146827103567453863533361127", 10)
	privateKey.PublicKey.Y.SetString("18393402141732720557619021402556864825411249923171095973373488507374861818914", 10)
	privateKey.D.SetString("112639173307471357601027408932476784445487605211371080119267694548701687726851", 10)

	var generatedCert = []byte{0x30, 0x82, 0x01, 0x74, 0x30, 0x82, 0x01, 0x19, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x05, 0x01, 0x4b, 0x23, 0x0c, 0xe3, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x1f, 0x31, 0x1d, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x14, 0x68, 0x61, 0x72, 0x64, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x65, 0x72,
		0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x39, 0x30, 0x36, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x30, 0x30, 0x36, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x1f, 0x31, 0x1d, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x14, 0x68, 0x61, 0x72, 0x64,
		0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xe8, 0x6d, 0xb4, 0xa8, 0xba, 0x01, 0x28, 0xff, 0x0c, 0xc3, 0xb3, 0xf5, 0x39, 0x57,
		0xcc, 0xf6, 0xfa, 0xd9, 0xc6, 0xbf, 0xd2, 0x65, 0x90, 0xbd, 0x73, 0xe1, 0x12, 0xb3, 0xec, 0x70, 0x37, 0xe7, 0x28, 0xaa, 0x4b, 0xf3, 0x8f, 0xd3, 0x90, 0x80, 0x08, 0xdf, 0xd9, 0x84, 0x3b, 0x68, 0x20, 0x05, 0x93, 0x38, 0x5c, 0xe5, 0x20, 0xda, 0x1f, 0x51, 0xb5, 0xd1, 0x62, 0x0d, 0x06, 0xa0, 0x1c, 0x22, 0xa3, 0x42, 0x30, 0x40, 0x30, 0x0e, 0x06,
		0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30,
		0x03, 0x01, 0x01, 0xff, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0xb2, 0xb4, 0x05, 0xb3, 0xbb, 0x15, 0x38, 0x3a, 0xa2, 0xdb, 0xf4, 0x4c, 0xd4, 0x82, 0x8e, 0x1c, 0x52, 0x79, 0x40, 0x93, 0x37, 0xb2, 0x39, 0xd5, 0x29, 0x55, 0x78, 0x2c, 0x95, 0x3e, 0xc0, 0xa0, 0x02,
		0x21, 0x00, 0xde, 0xa2, 0xb4, 0x5c, 0x09, 0x62, 0x28, 0xb6, 0x5a, 0x93, 0x61, 0x69, 0xf9, 0x8f, 0x50, 0x7c, 0x7f, 0x8b, 0x2f, 0x55, 0xf8, 0x7b, 0xf0, 0x61, 0x31, 0xc3, 0x39, 0x5e, 0x35, 0x9e, 0x45, 0x23,
	}

	cert, err := x509.ParseCertificate(generatedCert)
	panicIfErr(err)
	return []webrtc.Certificate{webrtc.CertificateFromX509(privateKey, cert)}
}

func panicIfErr(err error) {
	if err != nil {
		panic(err)
	}
}
